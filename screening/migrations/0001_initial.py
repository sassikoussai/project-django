# Generated by Django 5.1.3 on 2025-04-16 21:46

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Applicant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('full_name', models.CharField(max_length=190)),
                ('email', models.EmailField(max_length=254, validators=[django.core.validators.EmailValidator()])),
                ('phone_number', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator('^\\+?[0-9]{9,15}$', 'Enter a valid phone number.')])),
                ('skills', models.TextField()),
                ('linkedin_profile', models.URLField(blank=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='applicant_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'applicant',
                'ordering': ['full_name'],
            },
        ),
        migrations.CreateModel(
            name='Interview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('date', models.DateField()),
                ('time', models.TimeField()),
                ('mode', models.CharField(choices=[('online', 'Online'), ('in_person', 'In Person')], max_length=20)),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('rescheduled', 'Rescheduled')], default='scheduled', max_length=20)),
                ('feedback', models.TextField(blank=True)),
                ('applicant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interviews', to='screening.applicant')),
            ],
            options={
                'db_table': 'interview',
                'ordering': ['date', 'time'],
            },
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('comments', models.TextField()),
                ('rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('reviewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedbacks', to=settings.AUTH_USER_MODEL)),
                ('interview', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedbacks', to='screening.interview')),
            ],
            options={
                'db_table': 'feedback',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=190)),
                ('description', models.TextField()),
                ('required_skills', models.TextField()),
                ('location', models.CharField(max_length=190)),
                ('salary_range', models.CharField(max_length=100)),
                ('applicants', models.ManyToManyField(blank=True, related_name='applied_jobs', to='screening.applicant')),
            ],
            options={
                'db_table': 'job',
                'ordering': ['title'],
            },
        ),
        migrations.AddField(
            model_name='interview',
            name='job',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interviews', to='screening.job'),
        ),
        migrations.CreateModel(
            name='JobApplication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('applied', 'Applied'), ('interviewed', 'Interviewed'), ('offered', 'Offered'), ('hired', 'Hired'), ('rejected', 'Rejected')], default='applied', max_length=20)),
                ('applicant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='job_applications', to='screening.applicant')),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='applications', to='screening.job')),
            ],
            options={
                'db_table': 'job_application',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('message', models.TextField()),
                ('is_read', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'notification',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Recruiter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company_name', models.CharField(max_length=190)),
                ('position', models.CharField(max_length=190)),
                ('contact_email', models.EmailField(max_length=254, validators=[django.core.validators.EmailValidator()])),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='recruiter_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'recruiter',
                'ordering': ['company_name'],
            },
        ),
        migrations.AddField(
            model_name='job',
            name='recruiter',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='jobs', to='screening.recruiter'),
        ),
        migrations.CreateModel(
            name='Resume',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('file', models.FileField(upload_to='resumes/', validators=[django.core.validators.FileExtensionValidator(['pdf', 'doc', 'docx'])])),
                ('parsed_text', models.TextField(blank=True)),
                ('extracted_skills', models.TextField(blank=True)),
                ('ai_score', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('applicant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resumes', to='screening.applicant')),
            ],
            options={
                'db_table': 'resume',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='ScreeningQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('question_text', models.TextField()),
                ('answer_text', models.TextField(blank=True)),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='screening_questions', to='screening.job')),
            ],
            options={
                'db_table': 'screening_question',
                'ordering': ['job', 'question_text'],
            },
        ),
        migrations.CreateModel(
            name='ScreeningAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('answer_text', models.TextField()),
                ('applicant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='screening_answers', to='screening.applicant')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='screening.screeningquestion')),
            ],
            options={
                'db_table': 'screening_answer',
                'ordering': ['question', 'applicant'],
            },
        ),
        migrations.AddIndex(
            model_name='applicant',
            index=models.Index(fields=['full_name'], name='applicant_full_na_6bed62_idx'),
        ),
        migrations.AddIndex(
            model_name='applicant',
            index=models.Index(fields=['email'], name='applicant_email_d8185f_idx'),
        ),
        migrations.AddConstraint(
            model_name='applicant',
            constraint=models.UniqueConstraint(fields=('email',), name='unique_applicant_email'),
        ),
        migrations.AddIndex(
            model_name='feedback',
            index=models.Index(fields=['interview'], name='feedback_intervi_cbc2a8_idx'),
        ),
        migrations.AddIndex(
            model_name='feedback',
            index=models.Index(fields=['reviewer'], name='feedback_reviewe_623b02_idx'),
        ),
        migrations.AddIndex(
            model_name='interview',
            index=models.Index(fields=['date'], name='interview_date_477b06_idx'),
        ),
        migrations.AddIndex(
            model_name='interview',
            index=models.Index(fields=['job', 'applicant'], name='interview_job_id_854fb7_idx'),
        ),
        migrations.AddConstraint(
            model_name='interview',
            constraint=models.UniqueConstraint(fields=('job', 'applicant', 'date', 'time'), name='unique_interview_schedule'),
        ),
        migrations.AddIndex(
            model_name='jobapplication',
            index=models.Index(fields=['applicant'], name='job_applica_applica_77e115_idx'),
        ),
        migrations.AddIndex(
            model_name='jobapplication',
            index=models.Index(fields=['job'], name='job_applica_job_id_1922e8_idx'),
        ),
        migrations.AddConstraint(
            model_name='jobapplication',
            constraint=models.UniqueConstraint(fields=('applicant', 'job'), name='unique_job_application'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['user'], name='notificatio_user_id_3cbd6f_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['is_read'], name='notificatio_is_read_8a483f_idx'),
        ),
        migrations.AddIndex(
            model_name='recruiter',
            index=models.Index(fields=['company_name'], name='recruiter_company_a1b871_idx'),
        ),
        migrations.AddIndex(
            model_name='recruiter',
            index=models.Index(fields=['contact_email'], name='recruiter_contact_d73ea6_idx'),
        ),
        migrations.AddConstraint(
            model_name='recruiter',
            constraint=models.UniqueConstraint(fields=('contact_email',), name='unique_recruiter_email'),
        ),
        migrations.AddIndex(
            model_name='job',
            index=models.Index(fields=['title'], name='job_title_6bce90_idx'),
        ),
        migrations.AddIndex(
            model_name='job',
            index=models.Index(fields=['location'], name='job_locatio_68c449_idx'),
        ),
        migrations.AddIndex(
            model_name='resume',
            index=models.Index(fields=['applicant'], name='resume_applica_d76bc5_idx'),
        ),
        migrations.AddIndex(
            model_name='resume',
            index=models.Index(fields=['ai_score'], name='resume_ai_scor_8ded53_idx'),
        ),
        migrations.AddIndex(
            model_name='screeningquestion',
            index=models.Index(fields=['job'], name='screening_q_job_id_b32fae_idx'),
        ),
        migrations.AddIndex(
            model_name='screeningquestion',
            index=models.Index(fields=['question_text'], name='screening_q_questio_fb8df8_idx'),
        ),
        migrations.AddIndex(
            model_name='screeninganswer',
            index=models.Index(fields=['question'], name='screening_a_questio_82c012_idx'),
        ),
        migrations.AddIndex(
            model_name='screeninganswer',
            index=models.Index(fields=['applicant'], name='screening_a_applica_d1e0f9_idx'),
        ),
        migrations.AddConstraint(
            model_name='screeninganswer',
            constraint=models.UniqueConstraint(fields=('question', 'applicant'), name='unique_screening_answer'),
        ),
    ]
